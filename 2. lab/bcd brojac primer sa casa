-- design.vhdl
library IEEE;
use IEEE.std_logic_1164.all;
 ENTITY counter_ent IS
      PORT    (   clr : IN BIT;
                  clk : IN BIT;
                  q   : OUT BIT_VECTOR(3 DOWNTO 0)
              );
  END ENTITY counter_ent;
  
  ARCHITECTURE counter_arch OF counter_ent IS
  BEGIN
      PROCESS (clr, clk)
          VARIABLE q_int : BIT_VECTOR(3 DOWNTO 0);
          VARIABLE cq : BIT; -- da broji svaki drugi takt
      BEGIN
              IF clr='1' THEN
                q_int := "0000";
                cq := '0';
              ELSIF clk'event and clk='1' THEN
                  cq := not cq;
                  IF cq='1' THEN
                      CASE q_int IS
                          WHEN "0000" => q_int := "0001";
                          WHEN "0001" => q_int := "0010";
                          WHEN "0010" => q_int := "0011";
                          WHEN "0011" => q_int := "0100";
                          WHEN "0100" => q_int := "0101";
                          WHEN "0101" => q_int := "0110";
                          WHEN "0110" => q_int := "0111";
                          WHEN "0111" => q_int := "1000";
                          WHEN "1000" => q_int := "1001";
                          WHEN OTHERS => q_int := "0000";
                      END CASE;
                  END IF;
              END IF;
      q <= q_int;
      END PROCESS;
  END counter_arch
  ---------------------------------------------------------------
  --testbendza
  -- Code your testbench here
-- Code your testbench here
library IEEE;
use IEEE.std_logic_1164.all;


entity counter_tb is
end counter_tb;

architecture sim of counter_tb is
    signal clr_tb : std_logic := '0';
    signal clk_tb : std_logic := '0';
    signal q_tb   : std_logic_vector(3 downto 0);

begin
    uut : entity work.counter_ent
        port map (
            clr => clr_tb,
            clk => clk_tb,
            q   => q_tb
        );

    stimulus : process
    begin
        clr_tb <= '1';
        clk_tb <= '0';
        wait for 10 ns;

        clr_tb <= '0';
        clk_tb <= '1';
        wait for 10 ns;

        clk_tb <= '0';
        wait for 10 ns;

        clk_tb <= '1';
        wait for 10 ns;

        clk_tb <= '0';
        wait for 10 ns;

        clk_tb <= '1';
        wait for 10 ns;

        clk_tb <= '0';
        wait for 10 ns;

        clk_tb <= '1';
        wait for 10 ns;

        clk_tb <= '0';
        wait for 10 ns;

        clk_tb <= '1';
        wait for 10 ns;

        clk_tb <= '0';
        wait for 10 ns;

        wait;
    end process;

end sim;
