library ieee;
use ieee.std_logic_1164.all;

entity and_or_circuit is
  generic (
    N: positive := 4
  );
  port (
    A: in std_logic;
    B: in std_logic;
    C: in std_logic_vector(N-1 downto 0);
    D: out std_logic
  );
end and_or_circuit;

architecture rtl of and_or_circuit is
begin
  process(A, B, C)
    variable xor_out: std_logic;
    variable or_out: std_logic;
  begin
    D <= '0';
    
    gen_block: for i in 0 to N-1 generate
      component xorGate is
        port (
          A: in std_logic;
          B: in std_logic;
          Y: out std_logic
        );
      end component;
      
      component orGate is
        port (
          A: in std_logic;
          B: in std_logic;
          Y: out std_logic
        );
      end component;

      xor_inst: xorGate
        port map (
          A => C(i),
          B => D,
          Y => xor_out
        );
        
      or_inst: orGate
        port map (
          A => xor_out,
          B => C(i),
          Y => or_out
        );
        
      if i = 0 then
        D <= or_out;
      else
        D <= or_inst.Y;
      end if;
    end generate gen_block;
  end process;
end architecture rtl;
-----------------------------------------
--testbench
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity and_or_circuit_tb is
end and_or_circuit_tb;

architecture tb_arch of and_or_circuit_tb is
  component and_or_circuit is
    generic (
      N: positive := 4
    );
    port (
      A: in std_logic;
      B: in std_logic;
      C: in std_logic_vector(N-1 downto 0);
      D: out std_logic
    );
  end component;

  signal A_tb: std_logic := '0';
  signal B_tb: std_logic := '0';
  signal C_tb: std_logic_vector(3 downto 0) := "0000";
  signal D_tb: std_logic;

begin
  dut: and_or_circuit
    generic map (
      N => 4
    )
    port map (
      A => A_tb,
      B => B_tb,
      C => C_tb,
      D => D_tb
    );

  stimulus: process
  begin
    A_tb <= '0';
    B_tb <= '0';
    C_tb <= "0000";
    wait for 10 ns;
    
    -- Test Case 1: A = 0, B = 0, C = "0000"
    A_tb <= '0';
    B_tb <= '0';
    C_tb <= "0000";
    wait for 10 ns;
    assert (D_tb = '0') report "Test Case 1 failed" severity error;
    
    -- Test Case 2: A = 1, B = 0, C = "0000"
    A_tb <= '1';
    B_tb <= '0';
    C_tb <= "0000";
    wait for 10 ns;
    assert (D_tb = '0') report "Test Case 2 failed" severity error;
    
    -- Test Case 3: A = 0, B = 1, C = "0000"
    A_tb <= '0';
    B_tb <= '1';
    C_tb <= "0000";
    wait for 10 ns;
    assert (D_tb = '0') report "Test Case 3 failed" severity error;
    
    -- Test Case 4: A = 1, B = 1, C = "0000"
    A_tb <= '1';
    B_tb <= '1';
    C_tb <= "0000";
    wait for 10 ns;
    assert (D_tb = '1') report "Test Case 4 failed" severity error;
    
    -- Test Case 5: A = 0, B = 0, C = "1111"
    A_tb <= '0';
    B_tb <= '0';
    C_tb <= "1111";
    wait for 10 ns;
    assert (D_tb = '1') report "Test Case 5 failed" severity error;
    
    -- Test Case 6: A = 1, B = 0, C = "1111"
    A_tb <= '1';
    B_tb <= '0';
    C_tb <= "1111";
    wait for 10 ns;
    assert (D_tb = '1') report "Test Case 6 failed" severity error;
    
    -- Test Case 7: A = 0, B = 1, C = "1111"
    A_tb <= '0';
    B_tb <= '1';
    C_tb <= "1111";
    wait for 10 ns;
    assert (D_tb = '1') report "Test Case 7 failed" severity error;
    
    -- Test Case 8: A = 1, B = 1, C = "1111"
    A_tb <= '1';
    B_tb <= '1';
    C_tb <= "1111";
    wait for 10 ns;
    assert (D_tb = '1') report "Test Case 8 failed" severity error;
    
    wait;
  end process stimulus;

end tb_arch;
