-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;

entity mux_4to1 is
 port(
 
     A,B,C,D : in STD_LOGIC;
     S0,S1: in STD_LOGIC;
     Z: out STD_LOGIC
  );
end mux_4to1;
 
architecture bhv of mux_4to1 is
begin
process (A,B,C,D,S0,S1) is --process
begin
  if (S0 ='0' and S1 = '0') then
      Z <= A;
  elsif (S0 ='1' and S1 = '0') then
      Z <= B;
  elsif (S0 ='0' and S1 = '1') then
      Z <= C;
  else
      Z <= D;
  end if;
 
end process;
end bhv;
____________________________________________________________________________________________
--testbench
-- Code your testbench here
library IEEE;
use IEEE.std_logic_1164.all;

ENTITY tb_mux IS
END tb_mux;
 
ARCHITECTURE behavior OF tb_mux IS

  signal A,B,C,D,S0,S1: STD_LOGIC;
  SIGNAL Z:STD_LOGIC;
 
BEGIN
 
   uut: entity work.mux_4to1(bhv) 
   PORT MAP (
          A => A,
          B => B,
          C => C,
          D => D,
          S0 => S0,
          S1 => S1,
          Z => Z
        );
 
   stim_proc: process
   begin
      
      wait for 100 ns; 
 
    A <= '1';
    B <= '0';
    C <= '1';
    D <= '0';       
 
    S0 <= '0'; S1 <= '0';
 
      wait for 100 ns; 
 
    S0 <= '1'; S1 <= '0';
 
      wait for 100 ns; 
 
    S0 <= '0'; S1 <= '1';
 
        wait for 100 ns;   
 
    S0 <= '0'; S1 <= '1';  
 
        wait for 100 ns;   
 
    end process;
 
END;
